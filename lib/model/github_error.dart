/// Error Generated by [GitHub]
class GitHubError implements Exception {
  final String? message;
  final String? apiUrl;
  final Object? source;

  const GitHubError(this.message, {this.apiUrl, this.source});

  @override
  String toString() => 'GitHub Error: $message';
}

class NotReady extends GitHubError {
  const NotReady(String path)
      : super(
          'Not ready. Try again later',
          apiUrl: path,
        );
}

/// GitHub Entity was not found
class NotFound extends GitHubError {
  const NotFound(
    String msg,
  ) : super(msg);
}

class BadRequest extends GitHubError {
  const BadRequest([String? msg = 'Not Found']) : super(msg);
}

/// GitHub Repository was not found
class RepositoryNotFound extends NotFound {
  const RepositoryNotFound(String repo) : super('Repository Not Found: $repo');
}

/// Release not found
class ReleaseNotFound extends NotFound {
  const ReleaseNotFound.fromTagName(String? tagName) : super('Release for tagName $tagName Not Found.');
}

/// GitHub User was not found
class UserNotFound extends NotFound {
  const UserNotFound(String user) : super('User Not Found: $user');
}

/// GitHub Organization was not found
class OrganizationNotFound extends NotFound {
  const OrganizationNotFound(String? organization) : super('Organization Not Found: $organization');
}

/// GitHub Team was not found
class TeamNotFound extends NotFound {
  const TeamNotFound(int id) : super('Team Not Found: $id');
}

/// Access was forbidden to a resource
class AccessForbidden extends GitHubError {
  const AccessForbidden() : super('Access Forbidden');
}

/// Client hit the rate limit.
class RateLimitHit extends GitHubError {
  const RateLimitHit() : super('Rate Limit Hit');
}

/// A GitHub Server Error
class ServerError extends GitHubError {
  ServerError(int statusCode, String? message) : super('${message ?? 'Server Error'} ($statusCode)');
}

/// An Unknown Error
class UnknownError extends GitHubError {
  const UnknownError([String? message]) : super(message ?? 'Unknown Error');
}

/// GitHub Client was not authenticated
class NotAuthenticated extends GitHubError {
  const NotAuthenticated() : super('Client not Authenticated');
}

class InvalidJSON extends BadRequest {
  const InvalidJSON([String? message = 'Invalid JSON']) : super(message);
}

class ValidationFailed extends GitHubError {
  const ValidationFailed([String message = 'Validation Failed']) : super(message);
}
